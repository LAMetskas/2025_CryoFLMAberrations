function [dsse,dLL]=objectivefun(obj,x)
% objectivefun - the objective function to be optimized in the optimization
% step. 
%   It takes the input values in x to generated the phase retrieved PSFs and
%   calculated the log likelihood of the phase retrieved PSFs compared to the
%   measured PSFs. It uses the phase retrieval results from plane A to model
%   the PSFs in both planes. The PSFs of plane B are generated by shifting
%   the x,y,z of PSFs of plane A a certain amount according to 'PlaneShift'
%   and 'PlaneDis'
%
%   see also OTFrescale PSF_pupil OptimPR_Ast/genPR
obj.PRobjA.PRobj.SubroiSize=x(1);
obj.PRobjA.PRobj.IterationNumK=x(2);
obj.PRobjA.PRobj.PRstruct.RefractiveIndex=x(3);
Iratio=obj.Iratio;
z=[obj.PRobjA.PRobj.Zstart:obj.PRobjA.PRobj.Zstep:obj.PRobjA.PRobj.Zend];
mask=(z>=obj.PRobjA.FitZrange(1))&(z<=obj.PRobjA.FitZrange(2));
% zind=[obj.PRobj.Zindstart:obj.PRobj.Zindstep:obj.PRobj.Zindend];
% indL=zeros(size(z));
% indL(zind)=1;
% mask1=mask&(indL==1);
obj.PRobjA.genPR();
MpsfoA=obj.PRobjA.PRobj.Mpsf_subroi(:,:,mask);
MpsfoB=obj.PRobjB.PRobj.Mpsf_subroi(:,:,mask);

% generate PSF model for plane A
ZpsfoA=obj.PRobjA.PRobj.PSFstruct.ZKpsf(:,:,mask);
obj.OTFobj.SigmaX=x(4);
obj.OTFobj.SigmaY=x(5);
obj.OTFobj.Pixelsize=obj.PRobjA.PRobj.Pixelsize;
obj.OTFobj.PSFs=ZpsfoA;
obj.OTFobj.scaleRspace();
ZpsfA=obj.OTFobj.Modpsfs;

% generate PSF model for plane B
c=obj.PlaneShift;

obj.PSFobj.PRstruct=obj.PRobjA.PRobj.PRstruct;
obj.PSFobj.Xpos=c(1).*ones(size(z));
obj.PSFobj.Ypos=c(2).*ones(size(z));
obj.PSFobj.Zpos=z+obj.PlaneDis;
obj.PSFobj.Boxsize=obj.PRobjA.PRobj.PSFsize;
obj.PSFobj.Pixelsize=obj.PRobjA.PRobj.Pixelsize;
obj.PSFobj.precomputeParam();
obj.PSFobj.genPSF();
obj.PSFobj.PRstruct.SigmaX=x(4);
obj.PSFobj.PRstruct.SigmaY=x(5);
obj.PSFobj.scalePSF();
ZpsfB=obj.PSFobj.ScaledPSFs(:,:,mask);
[dsse,dLL]=calErr(MpsfoA,MpsfoB,ZpsfA,ZpsfB,Iratio);
end

function [sse,LL]=calErr(data1,data2,model1,model2,Iratio)
sz1=size(data1);
R1=min(31,sz1(1));
sz2=size(data2);
szm=size(model1);

data1i=cutRegion(data1,sz1,R1);
data2i=cutRegion(data2,sz2,R1);

model1i=cutRegion(model1,szm,R1);
model2i=cutRegion(model2,szm,R1);

sz=size(model1i);
model1o=zeros(sz);
model2o=zeros(sz);

I=1000;
bg=2;
I1=[];
bg1=[];
I2=[];
bg2=[];
for ii=1:sz(3)
    est1=fminsearch(@(x)modelFit(x,model1i(:,:,ii),data1i(:,:,ii)),[I,bg],optimset('MaxIter',50,'Display','off'));
    est1(est1<0)=0;
    I1=cat(1,I1,est1(1));
    bg1=cat(1,bg1,est1(2));
    %model1o(:,:,ii)=model1i(:,:,ii).*est1(1)+est1(2);
    est2=fminsearch(@(x)modelFit1(x,est1(1).*Iratio,model2i(:,:,ii),data2i(:,:,ii)),[bg],optimset('MaxIter',50,'Display','off'));
    est2(est2<0)=0;
    %I2=cat(1,I2,est2(1));
    bg2=cat(1,bg2,est2(1));
    %model2o(:,:,ii)=model2i(:,:,ii).*est2(1)+est2(2);

end


for ii=1:sz(3)
    model1o(:,:,ii)=model1i(:,:,ii).*I1(ii)+bg1(ii);
    model2o(:,:,ii)=model2i(:,:,ii).*I1(ii).*Iratio+bg2(ii);    
end

overlay1=joinchannels('RGB',data1i,model1o);
overlay2=joinchannels('RGB',data2i,model2o);
sse=sum(sum(sum((data1i-model1o).^2+(data2i-model2o).^2)));
LL=sum(sum(sum(2*(data1i-model1o-model1o.*log(data1i)+model1o.*log(model1o)+data2i-model2o-model2o.*log(data2i)+model2o.*log(model2o)))));

end

function sse=modelFit(x,model,data)
I=x(1);
bg=x(2);
modeli=model.*I+bg;
sse=sum(sum((modeli-data).^2));
end

function sse=modelFit1(x,I,model,data)
bg=x(1);
modeli=model.*I+bg;
sse=sum(sum((modeli-data).^2));
end

function out=cutRegion(in,sz,R1)
realsize0=floor(R1/2);
realsize1=ceil(R1/2);
starty=-realsize0+floor(sz(2)/2)+1;endy=realsize1+floor(sz(2)/2);
startx=-realsize0+floor(sz(1)/2)+1;endx=realsize1+floor(sz(1)/2);
out=in(starty:endy,startx:endx,:);

end
